<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cory Simmons</title>
    <description>A frontend developer's portfolio and writings.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 15 Oct 2016 04:37:13 -0400</pubDate>
    <lastBuildDate>Sat, 15 Oct 2016 04:37:13 -0400</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Building a Simple Typechecker</title>
        <description>&lt;p&gt;Type-checking is pretty sweet and helps prevent lots of hard-to-find bugs. If you‚Äôre using &lt;a href=&quot;/writings/2016/javascript/default-named-parameter-functions-for-everything&quot;&gt;default named params&lt;/a&gt; for all your functions, it‚Äôs fairly easy to integrate some simple type-checking.&lt;/p&gt;

&lt;p&gt;A real-world example might make this more clear!&lt;/p&gt;

&lt;p&gt;Frankenstein (the doctor ‚Äì not the monster) has some cats. Some of them have less legs than they are supposed to have. He can add more legs, but he developed some compulsive disorder and can only add legs if he‚Äôs allowed to double them. As @mpjme would say, this is the kind of problem you encounter every day in Enterprise-level Coding‚Ñ¢.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;typeCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argsObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argsObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Comparing the arguments to the type interface.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argsObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Type interface&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kittenTyping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;frankenKitten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nickname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hops'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;typeCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kittenTyping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// interface, argsObj&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sewing&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;üôÄ&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;Now&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;üòª`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Lets saw a leg off so Hops ends up with a normal amount of legs (4), then let's rename him Skip.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;frankenKitten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Skip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// TypeError: 2 should be a number type!&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;frankenKitten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Ah, that's better!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we‚Äôre catching type bugs that otherwise would‚Äôve leaked through since clever JavaScript will ‚Äúintelligently‚Äù (aka: magically) convert that &lt;code class=&quot;highlighter-rouge&quot;&gt;'2'&lt;/code&gt; string into a number during the multiplication step.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Protip:&lt;/strong&gt; Place &lt;code class=&quot;highlighter-rouge&quot;&gt;typeCheck()&lt;/code&gt; right above &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; statements to help prevent bugs. If you encounter a bug, just add &lt;code class=&quot;highlighter-rouge&quot;&gt;typeCheck()&lt;/code&gt;s higher and higher in your code until you find the culprit (then clean up after yourself except for that one right above your &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;). Psst, the culprit usually looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.&amp;lt;anonymous&amp;gt;&lt;/code&gt; in the terminal stack trace.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This isn‚Äôt great because it requires us to pass all the interface params to &lt;code class=&quot;highlighter-rouge&quot;&gt;argsObj&lt;/code&gt; whether we‚Äôre using them or not.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Hops is still a good name!&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;frankenKitten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;typeCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kittenTyping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error! We always need to pass whatever params match in the function defaults and the interface.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;typeCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kittenTyping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Works, but smells a bit.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I‚Äôm sure there‚Äôs some clever way to capture deconstructed variables without having to explicitly pass &lt;em&gt;all&lt;/em&gt; of them within &lt;code class=&quot;highlighter-rouge&quot;&gt;typeCheck()&lt;/code&gt;, but tbh, this solution isn‚Äôt as nice as existing tools and I‚Äôm getting hungry.&lt;/p&gt;

&lt;p&gt;It &lt;strong&gt;is&lt;/strong&gt;, however, a pretty good way to start sneaking basic type-checking into stuff without introducing any dependencies.&lt;/p&gt;

&lt;p&gt;It also educates and promotes the discussion of integrating one of those more feature-rich solutions. Coworkers should begin to see the value in type-checking, but probably feel kind of gross about all the &lt;code class=&quot;highlighter-rouge&quot;&gt;typeCheck()&lt;/code&gt; functions littering your code, or they‚Äôll want to typecheck arrays and such‚Ä¶&lt;/p&gt;

&lt;p&gt;That‚Äôs the &lt;em&gt;purrfect&lt;/em&gt; time to sell something like Flow/TypeScript/Elm. üòΩ&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/writings/2016/building-a-simple-typechecker</link>
        <guid isPermaLink="true">http://localhost:4000/writings/2016/building-a-simple-typechecker</guid>
        
        
      </item>
    
      <item>
        <title>Default Named Parameter Functions for Everything</title>
        <description>&lt;p&gt;I‚Äôm starting to wonder if we should just use named params for everything. They provide a lot of flexibility with no side-effects that I know of.&lt;/p&gt;

&lt;p&gt;Here‚Äôs how you do it:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nb&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// a: 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// b: 2&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// a: 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// b: 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;We don‚Äôt have to pass any smelly stuff like &lt;code class=&quot;highlighter-rouge&quot;&gt;foo(undefined, 3)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Our parameter is more descriptive.&lt;/li&gt;
  &lt;li&gt;Our parameter is more flexible because it‚Äôs not bound to any order-of-appearance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Equal sign when setting defaults. Colon to assign when calling.&lt;/p&gt;

&lt;p&gt;Yes, now you have to at least pass an empty object to your functions, and yes, we‚Äôre forcing people to pass objects at all times, but there‚Äôs probably an argument to be made about objects being more flexible anyway, and all-in-all, these are small prices to pay for how nice default arguments and named params are.&lt;/p&gt;

&lt;p&gt;Named params have always been one of my favorite features of a language. JS doesn‚Äôt seem to support a super-clean (still have to pass these as objects) way to do this, but at least now we can do it somewhat elegantly.&lt;/p&gt;

&lt;p&gt;Now‚Ä¶ if only there was a way to type-check those params‚Ä¶&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/writings/2016/javascript/default-named-parameter-functions-for-everything</link>
        <guid isPermaLink="true">http://localhost:4000/writings/2016/javascript/default-named-parameter-functions-for-everything</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Babel</title>
        <description>&lt;p&gt;There are new versions of Javascript (ES6, ES7) full of &lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;new features&lt;/a&gt; and a ton of syntax shortcuts. For example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;‚Ä¶is shorthand for an anonymous function that returns 2.&lt;/p&gt;

&lt;p&gt;As with everything in programming, people can‚Äôt agree on anything and browsers are slow to implement stuff. We‚Äôd have jetpacks before browsers implemented it correctly/consistently so some cool people made some things called ‚Äútranspilers‚Äù that convert ES6+ to usable old-fashioned Javascript (ES5). The most popular one is Babel.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/repl/#?evaluate=true&amp;amp;lineWrap=false&amp;amp;presets=es2015%2Creact%2Cstage-2&amp;amp;code=()%20%3D%3E%0A%20%202&quot;&gt;Here‚Äôs&lt;/a&gt; what it converts the above code to.&lt;/p&gt;

&lt;p&gt;Babel works with just about &lt;a href=&quot;https://babeljs.io/docs/setup/&quot;&gt;any build process&lt;/a&gt;, and is extendable with &lt;a href=&quot;https://babeljs.io/docs/plugins/&quot;&gt;modular plugins&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-it&quot;&gt;How to use it&lt;/h2&gt;

&lt;p&gt;The easiest/cleanest way is installing some npm packages and configuring it in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;. We‚Äôll make an npm script for it so we can run something like &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt; from the terminal.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/playground/babel&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo '{}' &amp;gt; package.json&lt;/code&gt; (create a valid JSON file so we can &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; to it)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm i -D babel-cli babel-preset-es2015 babel-preset-stage-0&lt;/code&gt; (this will install Babel‚Äôs CLI, ES6 (aka: ES2015), and ES7 support)&lt;/li&gt;
  &lt;li&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;babel&quot;&lt;/code&gt; object to &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;. Inside it we‚Äôll tell it to use the presets we installed:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babel&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stage-0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;test.js&lt;/code&gt; file and put it in a &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder. &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; (sometimes &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt;) is your original code. We transpile stuff from &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; to the sibling &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Protip:&lt;/strong&gt; You transpile CSS (Sass, Stylus, LESS, PostCSS, etc.) and HTML (Pug/Jade, Haml, etc.) as well. Currently most companies organize this stuff as &lt;code class=&quot;highlighter-rouge&quot;&gt;src/css&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;src/js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;src/html&lt;/code&gt;, etc. but I think &lt;a href=&quot;http://ecss.io/chapter5.html&quot;&gt;component architecture&lt;/a&gt; is a better solution for larger projects so try it out if you can.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Now run &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/.bin/babel src -d dist&lt;/code&gt; to ensure ES6/7 files in &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; are being transpiled to vanilla Javascript in the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder.&lt;/li&gt;
  &lt;li&gt;If you run &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/.bin/babel -h&lt;/code&gt; you‚Äôll see it has a watch flag.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/.bin/babel -w src -d dist&lt;/code&gt; and change some stuff in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/test.js&lt;/code&gt; to make sure it‚Äôs being transpiled on saves.&lt;/li&gt;
  &lt;li&gt;Now‚Ä¶ it‚Äôll suck to have to type all that crap every time so add it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;scripts&quot;&lt;/code&gt; object in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;dev&quot;&lt;/code&gt; then just run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; scripts don‚Äôt need the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/.bin/&lt;/code&gt; part).&lt;/li&gt;
  &lt;li&gt;You can add/nest extra files in &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; and everything will work fine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; should look like this (if you copy this make sure you run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i&lt;/code&gt; before using it):&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;babel-cli&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^6.10.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;babel-preset-es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^6.9.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;babel-preset-stage-0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^6.5.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;babel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stage-0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babel -w src -d dist&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;congrats&quot;&gt;Congrats&lt;/h2&gt;

&lt;p&gt;Now you‚Äôre able to use ES6/7. Not only that, but you‚Äôre using &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; scripts to perform tasks which is &lt;a href=&quot;http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/&quot;&gt;pretty nice&lt;/a&gt; as long as a CLI for a particular tool is available (if one isn‚Äôt, consider doing everyone a favor and &lt;a href=&quot;https://github.com/sindresorhus/meow&quot;&gt;making one&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;homework&quot;&gt;Homework&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Learn ES6/7. It‚Äôs awesome and will make your code much more elegant.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;https://babeljs.io/docs/learn-es2015/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.2ality.com/&quot;&gt;http://www.2ality.com/&lt;/a&gt; (amazing tutorials)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Learn how to use &lt;a href=&quot;https://github.com/mysticatea/npm-run-all&quot;&gt;npm-run-all&lt;/a&gt; to watch/transpile Babel and Sass at the exact same time and consider completely replacing Gulp/Grunt with npm scripts.
    &lt;ul&gt;
      &lt;li&gt;Make Sass output source maps to &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/css/maps&lt;/code&gt; folder.&lt;/li&gt;
      &lt;li&gt;Make Sass build everything in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/css&lt;/code&gt; before it watches.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/corysimmons/80e206aba0e807df2ef6f9ab5fd25300&quot;&gt;Answer Gist&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 23 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/writings/2016/javascript/babel</link>
        <guid isPermaLink="true">http://localhost:4000/writings/2016/javascript/babel</guid>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
