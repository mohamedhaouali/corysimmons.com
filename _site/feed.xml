<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cory Simmons</title>
    <description>A frontend developer's portfolio and writings.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 01 Aug 2017 23:07:13 -0400</pubDate>
    <lastBuildDate>Tue, 01 Aug 2017 23:07:13 -0400</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>WP Components</title>
        <description>&lt;p&gt;&lt;a href=&quot;#introducing-wp-components&quot;&gt;Jump to the code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve recently been working on a WordPress project where the client wanted to reuse existing content in different contexts. For instance, a blog feed listing that might appear on its own page, but would also appear on the homepage.&lt;/p&gt;

&lt;p&gt;It seemed like I could just duplicate code and that would work fine. Then I realized they wanted to reuse content everywhere.&lt;/p&gt;

&lt;p&gt;Wordpress’ Loop is pretty nasty. From the Codex:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;have_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;have_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endwhile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Sorry, no posts matched your criteria.'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This got duplicated all over the place.&lt;/p&gt;

&lt;p&gt;Then I realized I was reusing a lot of markup and styles as well. Perhaps a post listing was identical in two places: same markup, same styles, but maybe we just want to return 5 posts instead of 10.&lt;/p&gt;

&lt;p&gt;Does this stuff really require duplicating code?&lt;/p&gt;

&lt;h2 id=&quot;component-based-architecture&quot;&gt;Component-based Architecture&lt;/h2&gt;

&lt;p&gt;I set out to solve this problem, and I’ve really been itching to implement a &lt;a href=&quot;https://www.youtube.com/watch?v=m0oMHG6ZXvo&quot;&gt;component-based architecture&lt;/a&gt;. I really like the idea of keeping all aspects of a component isolated to a single folder rather than organizing by something arbitrary like file extension.&lt;/p&gt;

&lt;p&gt;So this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- index.php
- page.php
- includes
  - slider.php
  - listing.php
- css
  - slider.css
  - listing.css
- js
  - slider.js
  - listing.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Becomes this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- index.php
- page.php
- components
  - slider
    - slider.php
    - slider.css
    - slider.js
  - listing
    - listing.php
    - listing.css
    - listing.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This architecture’s benefits are many. All code related to a component is easily found, and isolated, in the same directory. If you’ve ever had to migrate from a theme built using a framework (like Bootstrap) to a framework (like Foundation) then you’re probably very familiar with the problem of not just being able to delete parts of the old framework as you implement those same parts in the new framework. Component architecture solves this problem.&lt;/p&gt;

&lt;p&gt;Say you need to upgrade the slider component. First you could create:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- components
  - slider-dev
    - slider-dev.php
    - slider-dev.css
    - slider-dev.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;slider-dev&lt;/code&gt; looks good, just delete the entire &lt;code class=&quot;highlighter-rouge&quot;&gt;components/slider&lt;/code&gt; directory then rename &lt;code class=&quot;highlighter-rouge&quot;&gt;slider-dev&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;slider&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can read more about this architecture in “&lt;a href=&quot;http://ecss.io/chapter5.html&quot;&gt;Enduring CSS&lt;/a&gt;”.&lt;/p&gt;

&lt;h2 id=&quot;jake-archibalds-performance-trick&quot;&gt;Jake Archibald’s Performance Trick&lt;/h2&gt;

&lt;p&gt;Jake is on Google’s fancy web performance team. His job consists of sitting around figuring out neat ways to make sites load faster.&lt;/p&gt;

&lt;p&gt;Last year &lt;a href=&quot;https://jakearchibald.com/2016/link-in-body/&quot;&gt;he wrote&lt;/a&gt; about putting CSS &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags immediately above their components rather than in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; for a quick perf win.&lt;/p&gt;

&lt;p&gt;This technique goes perfectly with component-based architecture.&lt;/p&gt;

&lt;p&gt;It looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components/slider/slider.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slider&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;img/slide-1.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;img/slide-2.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;img/slide-3.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components/slider/slider.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components/listing/listing.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;listing&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Post 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Post 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Post 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components/listing/listing.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;People rightfully worried the assets might be loaded multiple times on the same page if the component was loaded multiple times on the same page.&lt;/p&gt;

&lt;p&gt;With my approach, the assets are only loaded the first time they are requested on a page so this is a non-issue.&lt;/p&gt;

&lt;h2 id=&quot;obfuscating-to-wpquery&quot;&gt;Obfuscating to WP_Query&lt;/h2&gt;

&lt;p&gt;The entire concept rests on the fact you can query almost anything in WordPress via the aptly named &lt;a href=&quot;https://codex.wordpress.org/Class_Reference/WP_Query&quot;&gt;WP_Query&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;But, like The Loop, WP_Query looks bloated and terrible. From the Codex:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The Query
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$the_query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WP_Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The Loop
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$the_query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;have_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;ul&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$the_query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;have_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$the_query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;the_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;li&amp;gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_the_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;/li&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;/ul&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* Restore original Post Data */&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;wp_reset_postdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// no posts found
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Even cleaned-up, with the ability to mix markup and real args, it looks like this:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WP_Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'author'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;have_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;have_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;the_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_the_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endwhile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wp_reset_postdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;No posts found.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is why people hate PHP.&lt;/p&gt;

&lt;h2 id=&quot;introducing-wp-components&quot;&gt;Introducing WP Components&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Put the following in your &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt; file (at some point in the future I’ll probably turn this into a real WP “plugin”).&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$loaded_components = [];

function component($component, $args, $e = null) {
  global $loaded_components;

  ob_start();

  if (!in_array($component, $loaded_components)) {
    // TODO: Test to see if these files exist. Users might not need CSS and/or JS.
    echo '&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;' . get_template_directory_uri() . '/components/' . $component . '/' . $component . '.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;';
  }

  $c = new WP_Query($args); if ($c-&amp;gt;have_posts()) {
    require 'components/' . $component . '/' . $component . '.php';
    wp_reset_postdata();
  } else {
    require 'components/error.php';
  }

  if (!in_array($component, $loaded_components)) {
    echo '&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;' . get_template_directory_uri() . '/components/' . $component . '/' . $component . '.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;';
  }

  echo ob_get_clean();

  $loaded_components[] = $component;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;theme/components/slider&lt;/code&gt; directory with &lt;code class=&quot;highlighter-rouge&quot;&gt;slider.php&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;slider.css&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;slider.js&lt;/code&gt; inside of it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Insert the following anywhere in your views (use a valid $WP_Query array):&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'slider'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'category_name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'slide'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can reuse this anywhere with slightly different context:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'slider'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'category_name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'slide'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'slider'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'category_name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'slide'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'post_count'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;extra-context&quot;&gt;Extra Context&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;“What if I want the same $WP_Query but slightly different markup, styles, or scripts?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The third parameter to the &lt;code class=&quot;highlighter-rouge&quot;&gt;component()&lt;/code&gt; function is an array of custom extra context.&lt;/p&gt;

&lt;p&gt;It is passed to the components &lt;code class=&quot;highlighter-rouge&quot;&gt;.php&lt;/code&gt; file only. But with it, you can modify markup directly, CSS via classes, and JS via classes or &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; attributes.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'slider'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'category_name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'slide'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'post_count'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'title'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Slider with only 3 slides'&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'classes'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'slider--short'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'slide'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then in &lt;code class=&quot;highlighter-rouge&quot;&gt;theme/components/slider/slider.php&lt;/code&gt; you might do something like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$e&lt;/code&gt; is short for “extra” (as in extra context). &lt;code class=&quot;highlighter-rouge&quot;&gt;$c&lt;/code&gt; is short for “component”.&lt;/p&gt;

&lt;p&gt;You’ll notice we’re using The Loop here. It’s preferable to use core/pure/PHP WordPress functions (vs something like Timber) as long as you can obfuscate it a bit (less than Timber, but more than duplicating “The Loop” everywhere).&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slider &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'classes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;have_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;the_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'classes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_the_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endwhile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So the output would be:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components/slider/slider.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- asset paths resolve via get_template_directory_uri() --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Slider with only 3 slides&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slider slider--short&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slide&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Slide Title 1
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slide&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Slide Title 2
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slide&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Slide Title 3
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components/slider/slider.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can substantially clean up your views.&lt;/li&gt;
  &lt;li&gt;You can reuse content to provide multiple paths to the same endpoints throughout your design – in a very clean/easy/intuitive way.&lt;/li&gt;
  &lt;li&gt;Components are organized and easy to modify/upgrade, debug, and remove.&lt;/li&gt;
  &lt;li&gt;Obfuscates The Loop without throwing away the WP core API or forcing you to rely on a templating language (e.g. Twig).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Isolate the usage of this technique to &lt;strong&gt;components only&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Work &lt;strong&gt;with&lt;/strong&gt; WP’s core templating system, not against it. For instance, create &lt;code class=&quot;highlighter-rouge&quot;&gt;page.php&lt;/code&gt; as a generic template for all pages and then sprinkle the WP Components technique on top of it (e.g. a slider component that should appear on every page).&lt;/li&gt;
  &lt;li&gt;Ensure your JS waits until everything is ready before firing. If you have 2 sliders on the same page, the first slider will load JS immediately (before the 2nd slider’s markup exists in the DOM).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Test to see if these files exist. Users might not need CSS and/or JS.&lt;/li&gt;
  &lt;li&gt;Allow users to pass PHP vars to JS and CSS (probably via .js.php and .css.php extensions).&lt;/li&gt;
  &lt;li&gt;Convert to a WP plugin.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 02 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/writings/2017/php/wp-components</link>
        <guid isPermaLink="true">http://localhost:4000/writings/2017/php/wp-components</guid>
        
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>postcss-ant - An Overdue Apology</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/corysimmons/postcss-ant&quot;&gt;https://github.com/corysimmons/postcss-ant&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While maintaining Jeet/Lost, I ran into a lot of the same issues from the community:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;“Is there any way to reduce bloat?”&lt;/li&gt;
  &lt;li&gt;“Is there any way to just return the size?”&lt;/li&gt;
  &lt;li&gt;“Can I combine varying sizes? What about varying sizes of different types?”&lt;/li&gt;
  &lt;li&gt;“Can I override settings on a local level?”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My answer was always something like, “Sorry, but that’d require a complete rewrite of Jeet/Lost.”&lt;/p&gt;

&lt;p&gt;postcss-ant is that rewrite.&lt;/p&gt;

&lt;p&gt;Let me explain these one-by-one. While reading, try to keep in mind almost all grid systems suffer from at least a few of these problems even today.&lt;/p&gt;

&lt;h2 id=&quot;is-there-any-way-to-reduce-bloat&quot;&gt;“Is there any way to reduce bloat?”&lt;/h2&gt;

&lt;p&gt;Grid authors attempt to fix common user missteps by providing a layer of fixes for multiple eventualities.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clearfix&lt;/code&gt; is a great example of this.&lt;/p&gt;

&lt;p&gt;Jeet applied &lt;code class=&quot;highlighter-rouge&quot;&gt;clearfix&lt;/code&gt; liberally so nested grids would always be cleared. But what if the user wasn’t nesting grids? They still had mountains of &lt;code class=&quot;highlighter-rouge&quot;&gt;clearfix&lt;/code&gt; to deal with. It helped users avoid a problem, but at a pretty high cost.&lt;/p&gt;

&lt;p&gt;Nowadays we have flexbox, which gets rid of the need for &lt;code class=&quot;highlighter-rouge&quot;&gt;clearfix&lt;/code&gt;, so postcss-ant’s grid generator defaults to flexbox, and if you &lt;em&gt;do&lt;/em&gt; still prefer float-based grids, postcss-ant uses a much smaller &lt;code class=&quot;highlighter-rouge&quot;&gt;clearfix&lt;/code&gt; and only applies it to the grid container element instead of elements with potentially no floated children.&lt;/p&gt;

&lt;p&gt;On top of that, postcss-ant’s grid generation can produce a lot of sizes depending on your needs, so a lot of measures were taken to combine selectors when possible. This feature isn’t perfect, but it’s a step in the right direction.&lt;/p&gt;

&lt;p&gt;Places left for improvement:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cleaning up &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt; formulas. Right now they can get pretty gnarly, pretty fast. Although the formulas work well, it’d be best if they were a bit prettier. I know how to do this, but it’d just be a pretty large undertaking.&lt;/li&gt;
  &lt;li&gt;Combining more selectors when possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;is-there-any-way-to-just-return-the-size&quot;&gt;“Is there any way to just return the size?”&lt;/h2&gt;

&lt;p&gt;Sometimes people just wanted a size… Possibly so they could make their own grid classes… Possibly for some edge case… Possibly because they were building a space shuttle and just needed a size.&lt;/p&gt;

&lt;p&gt;Cory of a few years ago thought this would be a lot harder than it was and never worked on it, but someone along the way submitted a nice PR to Jeet that added this functionality in a really simple mixin.&lt;/p&gt;

&lt;p&gt;This functionality still needs added to Lost.&lt;/p&gt;

&lt;p&gt;But postcss-ant’s entire purpose was to &lt;strong&gt;start&lt;/strong&gt; as a size-getting function. After that, I could use those sizes to create whatever helpers I wanted with ease. It worked out pretty nice. &lt;code class=&quot;highlighter-rouge&quot;&gt;generate-grid&lt;/code&gt; is very powerful, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ratios()&lt;/code&gt; are unique to postcss-ant, but most importantly, you can always fallback to the size-getter to solve any layout need.&lt;/p&gt;

&lt;h2 id=&quot;can-i-combine-varying-sizes-what-about-varying-sizes-of-different-types&quot;&gt;“Can I combine varying sizes? What about varying sizes of different types?”&lt;/h2&gt;

&lt;p&gt;This came up so frequently…&lt;/p&gt;

&lt;p&gt;I hate this issue because it’s not possible (save yourself months and trust me) to have CSS know how many elements are on a row. It will be with some future CSS specs, but by then, Grid Spec will be mainstream and there will be no reason to try to make this kind of thing work.&lt;/p&gt;

&lt;p&gt;You just have to use a markup-heavy, negative-margin grid. Simple as that.&lt;/p&gt;

&lt;p&gt;I didn’t want to face that truth so I never offered this option with Jeet and just kept plugging away at CSS hacks, trying to figure the answer out.&lt;/p&gt;

&lt;p&gt;Eventually I gave in and when I made Lost I added negative-margin functionality (aka: “masonry grids”), so users can combine varying sizes all they’d like without having to worry about &lt;code class=&quot;highlighter-rouge&quot;&gt;nth-child&lt;/code&gt; at all.&lt;/p&gt;

&lt;p&gt;postcss-ant also has this negative-margin grid functionality, but where Lost only operated on fractions, postcss-ant can accept a slew of values on any row: valid CSS lengths (fixed units), fractions, and &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; keyword(s) that span the available space after the first few size types have been subtracted.&lt;/p&gt;

&lt;h2 id=&quot;can-i-override-settings-on-a-local-level&quot;&gt;“Can I override settings on a local level?”&lt;/h2&gt;

&lt;p&gt;With Jeet and Lost, you can, but these settings were wrapped up into a single shorthand function. It was somewhat readable with Jeet (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;column(1/2, $gutter: 10px)&lt;/code&gt;), but I was too excited about the prospect of maintaining a single codebase (instead of 3: SCSS, Stylus, LESS) with PostCSS, that I didn’t take the time needed to thoroughly learn PostCSS. I just piled all of these options on top of each other within a single, illegible, shorthand function.&lt;/p&gt;

&lt;p&gt;The first part of &lt;code class=&quot;highlighter-rouge&quot;&gt;lost-column: 1/2&lt;/code&gt; is fairly easy to understand, but what happens if we want &lt;code class=&quot;highlighter-rouge&quot;&gt;45px&lt;/code&gt; gutters? Now we have to do something like &lt;code class=&quot;highlighter-rouge&quot;&gt;lost-column: 1/2 2 45px&lt;/code&gt;. As if requiring someone to know what the &lt;code class=&quot;highlighter-rouge&quot;&gt;45px&lt;/code&gt; was wasn’t bad enough, there is some seemingly random cycle argument in there as well.&lt;/p&gt;

&lt;p&gt;After learning a bit about the composable nature of functional languages, I really wanted to make postcss-ant’s API very easy to read and even “chain”.&lt;/p&gt;

&lt;p&gt;Imagine you stumbled upon a project and saw this code:&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;generate-grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;gutter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;45px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;technique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negative-margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Most of it is fairly easy to read, but what about that &lt;code class=&quot;highlighter-rouge&quot;&gt;technique()&lt;/code&gt; thing? Well, if I picked bad words, or if it is just a concept you’ve never considered, you’re not “up a creek”. You can easily jump over to postcss-ant’s docs. Click “technique()” and know exactly what it’s doing.&lt;/p&gt;

&lt;p&gt;I think the ability to start with a really simple, yet powerful, tool and then slowly adding building blocks as you become more comfortable with the concepts, is the zenith of good API design.&lt;/p&gt;

&lt;h2 id=&quot;official-apology&quot;&gt;Official Apology&lt;/h2&gt;

&lt;p&gt;I’m sorry to anyone who used Jeet/Lost and has experienced these problems. I should’ve been a better maintainer and worked harder to find solutions. I guess I was just poor/busy/burnt out/stupid, and the grids were serving my limited purposes pretty well, so I didn’t take your issues as seriously as I should have.&lt;/p&gt;

&lt;p&gt;I know these features may be overdue – especially on the cusp of Grid Spec’s reign (still several months from usable folks!) – but I sincerely hope postcss-ant solves a lot of headaches you have with the current offering of grids – in particular, mine.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Nov 2016 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/writings/2016/design/postcss-ant-an-overdue-apology</link>
        <guid isPermaLink="true">http://localhost:4000/writings/2016/design/postcss-ant-an-overdue-apology</guid>
        
        
        <category>design</category>
        
      </item>
    
      <item>
        <title>Introducing npm Online-First Installer</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/corysimmons/nofi&quot;&gt;https://github.com/corysimmons/nofi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Working with npm offline is terrible. nofi makes it slightly less terrible until Yarn has some time to grow.&lt;/p&gt;

&lt;p&gt;For the past several months, I’ve been living in the woods – when I say woods, I mean it’s a 30-minute drive to the library with flaky wifi, and an hour drive to a college with consistent wifi.&lt;/p&gt;

&lt;p&gt;As a web-developer, you would think this would be pretty terrible, but it’s actually kind of nice. I drive into town in the morning, work throughout the day, download some packages &amp;amp; docs, then go home where there are no distractions to learn.&lt;/p&gt;

&lt;p&gt;I’ve never learned as fast in my entire life.&lt;/p&gt;

&lt;p&gt;The one big problem I’ve had is being able to download npm packages for offline use. Where some languages encourage replication (e.g. Python and &lt;a href=&quot;https://pypi.python.org/pypi/bandersnatch&quot;&gt;Bandersnatch&lt;/a&gt;), this seems to be npm’s &lt;a href=&quot;https://www.npmjs.com/package/npmo&quot;&gt;entire business model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;People have tried to figure out a solution to this. Addy has &lt;a href=&quot;https://addyosmani.com/blog/using-npm-offline/&quot;&gt;a post&lt;/a&gt; on the subject that made me hopeful, but after experimenting with all of these solutions, I was left frustrated.&lt;/p&gt;

&lt;p&gt;Most of the solutions he presents are unmaintained, incomplete, and they are all riddled with bugs.&lt;/p&gt;

&lt;p&gt;I would set them up according to their docs, download some packages, go offline, go to install them, and without fail, every so often there would be some dependency hell issue that prevented me from playing with a package I was studying… I’d troubleshoot and try alternate solutions. Nothing actually worked.&lt;/p&gt;

&lt;p&gt;Since nothing works, our only option is to develop (see: wait for a team of JS gurus to develop) some amazing package that will dethrone npm. &lt;a href=&quot;https://github.com/yarnpkg/yarn&quot;&gt;Yarn&lt;/a&gt; is that package manager.&lt;/p&gt;

&lt;p&gt;It’s fast, auto shrinkwraps things (creates a lockfile so you’re not fighting with merge conflicts every time a co-worker runs &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;), and purports to offer good offline support. If it doesn’t, it will, the contributors behind it are really efficient. There are a plethora of other cool features to it, but those are the only three I’m particularly interested in.&lt;/p&gt;

&lt;p&gt;The problem is, Yarn is huge and new. This means it’s going to be full of bugs for a while. I tried installing a package that depended on a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bin&lt;/code&gt; CLI. The CLI wasn’t there. Another night of not being able to tinker with toys. Another tool that doesn’t help me.&lt;/p&gt;

&lt;p&gt;At the recommendation of a few IRC’ers and an un-maintenance notice on &lt;a href=&quot;https://github.com/nolanlawson/local-npm#unmaintained-notice&quot;&gt;local-npm&lt;/a&gt;, I just started using the simplest solution I could: npm itself.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --cache-min Infinity&lt;/code&gt; will install from cache (located in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.npm&lt;/code&gt; by default). It actually worked better than Addy’s post would lead you to believe. It was at least very easy to reason about. As Addy also mentioned, it was pretty brutal to type that every time so I aliased it.&lt;/p&gt;

&lt;p&gt;I wasn’t using the offline tool enough to remember what it was doing, or when/why I needed to use it. I would catch myself using it in hopes of caching npm packages. Just stupid crap making me stupider because it’s a stupid problem I didn’t want to be dealing with.&lt;/p&gt;

&lt;p&gt;So I made a tool to help me not have to think about it all the time.&lt;/p&gt;

&lt;p&gt;Enter &lt;strong&gt;nofi&lt;/strong&gt; (npm Online-First Installer).&lt;/p&gt;

&lt;p&gt;nofi is an insanely simple wrapper around &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;. It works like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nofi -D some-package&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Check if user is online.&lt;/li&gt;
  &lt;li&gt;Online:  &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --force some-package&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Offline: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --cache-min Infinity --save-dev some-package&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It does this with a helpful message to ensure you know if you’re install TO cache, or installing FROM cache (respective to the order above).&lt;/p&gt;

&lt;p&gt;It works surprisingly well. It’s &lt;em&gt;at least&lt;/em&gt; easy to reason about.&lt;/p&gt;

&lt;p&gt;The only problem is it gets into that dependency hell thing where if you’re offline and try to install XYZ package, it will try to install ABC package at a version you don’t have.&lt;/p&gt;

&lt;p&gt;Entering rambling territory…&lt;/p&gt;

&lt;p&gt;There are a couple solutions to this I might implement after a few more “Dammit! I want to play with XYZ tonight!” moments, or if Yarn screws the pooch on their offline support.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One&lt;/em&gt; is to have nofi compare all versions of the cached package’s &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; dependencies to versions you have on your computer, then install that version of the the requested package. Pseudocode for offline installation might look like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nofi PackageA&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Collect &lt;strong&gt;all versions&lt;/strong&gt; of PackageA’s &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;s.&lt;/li&gt;
  &lt;li&gt;Map over the &lt;strong&gt;dependencies&lt;/strong&gt; in those &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;s, testing to see if they match cached packages at the versions specified.&lt;/li&gt;
  &lt;li&gt;Add failures to an array to filter against.
    0. Continue to operate on until the PackageA packages left standing are all compatible with cached dependencies.
    0. Install the freshest out of that group.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;em&gt;other&lt;/em&gt; big “solution” is to just use nofi all the time. After a while, you’ll have a pretty resilient collection of cached packages. Heck, we could even add a &lt;code class=&quot;highlighter-rouge&quot;&gt;--slllow&lt;/code&gt; flag in there to download every version of every dependency, but the pseudocode solution is probably a much better way to go about it.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/writings/2016/node/introducing-nofi</link>
        <guid isPermaLink="true">http://localhost:4000/writings/2016/node/introducing-nofi</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Introducing Package Script Manager</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/corysimmons/package-script-manager&quot;&gt;https://github.com/corysimmons/package-script-manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had been using npm scripts for a lot of little things, but never really saw it as a build tool until I read &lt;a href=&quot;https://www.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/&quot;&gt;Keith Cirkel’s article&lt;/a&gt; on it.&lt;/p&gt;

&lt;p&gt;There are some huge underlying points to that approach that never got the attention they deserved:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;This isn’t about npm or Make or XYZ. It’s about CLIs. CLIs are simply the most portable interface for a library. You can &lt;em&gt;easily&lt;/em&gt; wrap CLIs for use with &lt;em&gt;any&lt;/em&gt; task runner. You can even use CLIs without any sort of task runner.&lt;/li&gt;
  &lt;li&gt;You can run npm tasks in a particular order, and/or in parallel with &lt;a href=&quot;https://www.npmjs.com/package/npm-run-all&quot;&gt;npm-run-all&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;You can watch any glob pattern for a variety of events using &lt;a href=&quot;https://github.com/kimmobrunfeldt/chokidar-cli&quot;&gt;Chokidar CLI&lt;/a&gt;. It also makes a few bash variables available &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. You can use bash functions with that event, and operate on that path using tools like &lt;a href=&quot;https://linux.die.net/man/1/cut&quot;&gt;cut&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those last two points were very common/invalid complaints about using npm scripts, but there are still a lot of valid complaints revolving around the use of JSON.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let me make this perfectly clear for any aspiring library authors: &lt;strong&gt;STOP USING THINGS LIKE YAML AND JSON FOR CONFIG!&lt;/strong&gt; The only reason static content should ever exist is when working with databases or state. Otherwise, assume your userbase isn’t full of toddlers and give them a power tool to explore interesting ways to config their projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since npm scripts are tied up in JSON, there are lots of things you can’t do with them: comments, variables, etc. In fact, Keith’s article’s comment section is literally full of reasons why JSON configs suck.&lt;/p&gt;

&lt;p&gt;So I made a thing that will import all the key/val pairs from a JS object to package.json &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;scripts&quot;&lt;/code&gt;. It does this destructively (any scripts you currently have in package.json will be overwritten) to force a single source of truth for your scripts.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;https://github.com/corysimmons/package-script-manager&quot;&gt;Package Script Manager&lt;/a&gt;. It’s a very simple CLI that destructively migrates a JS object from one file to &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;scripts&quot;&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;It works like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm i -D package-script-manager&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// psm.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Earth'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This task should just echo 'Hello Earth!' to the terminal&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello ${planet}!'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;❗️ Next part is destructive and will discard whatever scripts you have in package.json. Make sure you migrate your package.json scripts to psm.js, and/or back them up somewhere until you’re comfortable with this workflow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ node_modules/.bin/psm&lt;/code&gt; (need to run this from &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/.bin&lt;/code&gt; once to config some new tasks for it)&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// package.json&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo 'Hello Earth!'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;psm&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;psm psm.js package.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;psm:watch&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;chokidar psm.js -c 'npm run psm'&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you can use it with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run psm&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;psm:watch&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Between &lt;code class=&quot;highlighter-rouge&quot;&gt;npm-run-all&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;chokidar-cli&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;package-script-manager&lt;/code&gt;, you have all the power of any task runner out there, but the most important part is, now you are supporting CLI development as opposed to Gulp plugin development. Again, one of those things is insanely portable, and the other is specific to a single task runner. And if you’re going to write some sort of function for a build task, would you rather do it in a task runner’s plugin API, or just in plain Node?&lt;/p&gt;

&lt;p&gt;Stop reading here if you like Webpack.&lt;/p&gt;

&lt;p&gt;Where do tools like Webpack fit into this? They perform a separate function than task running. They mostly focus on something called “bundling”. In very plain/overly-simple terms, bundling just concatenates files (this triggers the React developer), and Webpack isn’t particularly good at it when compared to a forward-thinking bundler like Rollup.&lt;/p&gt;

&lt;p&gt;Webpack is bad for the internet because it contributes to the JS-everything mindset – going as far as to import/insert CSS and imagery through JS (people without JS get absolutely nothing) in the name of HTTP request reduction. The minimize requests thing is now an anti-pattern carryover from HTTP1, but I’m already escaping the scope of this post so I’ll cover that more in a future post.&lt;/p&gt;

&lt;p&gt;I’d suggest dumping Webpack for Rollup; just using it to eliminate useless code (unless you also need Node in the browser); and throwing that task into your npm scripts along with every other optimization task.&lt;/p&gt;

&lt;p&gt;This approach, combined with comments, keeps a very clear separation of concerns. And with those few tools mentioned above, you can easily slap together a very easy-to-reason-about/powerful/extensible/portable task config.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// psm.js&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Easily alter your project structure&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;distDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dist'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsDist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bundleName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundle'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Compresses imagery once on startup, then runs other optimizations and the development server in parallel.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// https://github.com/mysticatea/npm-run-all&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imagemin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rollup&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;chokidar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uglify&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brower&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Losslessly compress imagery https://github.com/imagemin/imagemin-cli&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// We could watch this with Chokidar, but I wanted to demonstrate you can perform tasks sequentially, as well as in parallel, very easily.&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;imagemin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imagemin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Tree-shake JS https://medium.com/@Rich_Harris/tree-shaking-versus-dead-code-elimination-d3765df85c80&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// It will default to use the config in rollup.config.js (see? some people know JSON configs suck)&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;rollup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rollup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsDist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/${bundleName}.js`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Uglify/minify JS https://github.com/mishoo/UglifyJS&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;uglify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uglifyjs&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsDist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/${bundleName}.js -o ${jsDist}/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bundleName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Let's use Chokidar and run uglify everytime our JS bundle changes https://github.com/kimmobrunfeldt/chokidar-cli&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;chokidar:uglify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chokidar&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsDist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/${bundleName}.js -c 'npm run uglifyjs'`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Fire up a really powerful dev server https://www.browsersync.io/docs/command-line&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Trigger more React devs: I hear Webpack's HMR is overrated from people who write books about Webpack.&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;browser-sync&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sync&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is untested pseudocode, but I’m pretty sure the biggest hiccup would be a typo or something.&lt;/p&gt;

&lt;p&gt;Think about that for a second. I’m compressing all types of imagery; tree-shaking my JS; watching tree-shook code and uglifying it on change; and spinning up a dev server; with 6 lines of very readable, documented, code.&lt;/p&gt;

&lt;p&gt;Gulp &amp;amp; Co. are dead. Long live CLIs.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/writings/2016/node/introducing-package-script-manager</link>
        <guid isPermaLink="true">http://localhost:4000/writings/2016/node/introducing-package-script-manager</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Building a Simple Typechecker</title>
        <description>&lt;p&gt;Type-checking is pretty sweet and helps prevent lots of hard-to-find bugs. If you’re using &lt;a href=&quot;/writings/2016/javascript/default-named-parameter-functions-for-everything&quot;&gt;default named params&lt;/a&gt; for all your functions, it’s fairly easy to integrate some simple type-checking.&lt;/p&gt;

&lt;p&gt;A real-world example might make this more clear!&lt;/p&gt;

&lt;p&gt;Frankenstein (the doctor – not the monster) has some cats. Some of them have less legs than they are supposed to have. He can add more legs, but he developed some compulsive disorder and can only add legs if he’s allowed to double them. As @mpjme would say, this is the kind of problem you encounter every day in Enterprise-level Coding™.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;typeCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argsObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argsObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Comparing the arguments to the type interface.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argsObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Type interface&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kittenTyping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;frankenKitten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nickname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hops'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;typeCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kittenTyping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// interface, argsObj&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sewing&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;🙀&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;Now&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;😻`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Lets saw a leg off so Hops ends up with a normal amount of legs (4), then let's rename him Skip.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;frankenKitten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Skip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// TypeError: 2 should be a number type!&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;frankenKitten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Ah, that's better!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we’re catching type bugs that otherwise would’ve leaked through since clever JavaScript will “intelligently” (aka: magically) convert that &lt;code class=&quot;highlighter-rouge&quot;&gt;'2'&lt;/code&gt; string into a number during the multiplication step.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Protip:&lt;/strong&gt; Place &lt;code class=&quot;highlighter-rouge&quot;&gt;typeCheck()&lt;/code&gt; right above &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; statements to help prevent bugs. If you encounter a bug, just add &lt;code class=&quot;highlighter-rouge&quot;&gt;typeCheck()&lt;/code&gt;s higher and higher in your code until you find the culprit (then clean up after yourself except for that one right above your &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;). Psst, the culprit usually looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.&amp;lt;anonymous&amp;gt;&lt;/code&gt; in the terminal stack trace.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This isn’t great because it requires us to pass all the interface params to &lt;code class=&quot;highlighter-rouge&quot;&gt;argsObj&lt;/code&gt; whether we’re using them or not.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Hops is still a good name!&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;frankenKitten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;typeCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kittenTyping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error! We always need to pass whatever params match in the function defaults and the interface.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;typeCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kittenTyping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Works, but smells a bit.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m sure there’s some clever way to capture deconstructed variables without having to explicitly pass &lt;em&gt;all&lt;/em&gt; of them within &lt;code class=&quot;highlighter-rouge&quot;&gt;typeCheck()&lt;/code&gt;, but tbh, this solution isn’t as nice as existing tools and I’m getting hungry.&lt;/p&gt;

&lt;p&gt;It &lt;strong&gt;is&lt;/strong&gt;, however, a pretty good way to start sneaking basic type-checking into stuff without introducing any dependencies.&lt;/p&gt;

&lt;p&gt;It also educates and promotes the discussion of integrating one of those more feature-rich solutions. Coworkers should begin to see the value in type-checking, but probably feel kind of gross about all the &lt;code class=&quot;highlighter-rouge&quot;&gt;typeCheck()&lt;/code&gt; functions littering your code, or they’ll want to typecheck arrays and such…&lt;/p&gt;

&lt;p&gt;That’s the &lt;em&gt;purrfect&lt;/em&gt; time to sell something like Flow/TypeScript/Elm. 😽&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/writings/2016/building-a-simple-typechecker</link>
        <guid isPermaLink="true">http://localhost:4000/writings/2016/building-a-simple-typechecker</guid>
        
        
      </item>
    
      <item>
        <title>Default Named Parameter Functions for Everything</title>
        <description>&lt;p&gt;I’m starting to wonder if we should just use named params for everything. They provide a lot of flexibility with no side-effects that I know of.&lt;/p&gt;

&lt;p&gt;Here’s how you do it:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nb&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// a: 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// b: 2&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// a: 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// b: 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;We don’t have to pass any smelly stuff like &lt;code class=&quot;highlighter-rouge&quot;&gt;foo(undefined, 3)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Our parameter is more descriptive.&lt;/li&gt;
  &lt;li&gt;Our parameter is more flexible because it’s not bound to any order-of-appearance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Equal sign when setting defaults. Colon to assign when calling.&lt;/p&gt;

&lt;p&gt;Yes, now you have to at least pass an empty object to your functions, and yes, we’re forcing people to pass objects at all times, but there’s probably an argument to be made about objects being more flexible anyway, and all-in-all, these are small prices to pay for how nice default arguments and named params are.&lt;/p&gt;

&lt;p&gt;Named params have always been one of my favorite features of a language. JS doesn’t seem to support a super-clean (still have to pass these as objects) way to do this, but at least now we can do it somewhat elegantly.&lt;/p&gt;

&lt;p&gt;Now… if only there was a way to type-check those params…&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/writings/2016/javascript/default-named-parameter-functions-for-everything</link>
        <guid isPermaLink="true">http://localhost:4000/writings/2016/javascript/default-named-parameter-functions-for-everything</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Babel</title>
        <description>&lt;p&gt;There are new versions of Javascript (ES6, ES7) full of &lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;new features&lt;/a&gt; and a ton of syntax shortcuts. For example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;…is shorthand for an anonymous function that returns 2.&lt;/p&gt;

&lt;p&gt;As with everything in programming, people can’t agree on anything and browsers are slow to implement stuff. We’d have jetpacks before browsers implemented it correctly/consistently so some cool people made some things called “transpilers” that convert ES6+ to usable old-fashioned Javascript (ES5). The most popular one is Babel.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/repl/#?evaluate=true&amp;amp;lineWrap=false&amp;amp;presets=es2015%2Creact%2Cstage-2&amp;amp;code=()%20%3D%3E%0A%20%202&quot;&gt;Here’s&lt;/a&gt; what it converts the above code to.&lt;/p&gt;

&lt;p&gt;Babel works with just about &lt;a href=&quot;https://babeljs.io/docs/setup/&quot;&gt;any build process&lt;/a&gt;, and is extendable with &lt;a href=&quot;https://babeljs.io/docs/plugins/&quot;&gt;modular plugins&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-it&quot;&gt;How to use it&lt;/h2&gt;

&lt;p&gt;The easiest/cleanest way is installing some npm packages and configuring it in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;. We’ll make an npm script for it so we can run something like &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt; from the terminal.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/playground/babel&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo '{}' &amp;gt; package.json&lt;/code&gt; (create a valid JSON file so we can &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; to it)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm i -D babel-cli babel-preset-es2015 babel-preset-stage-0&lt;/code&gt; (this will install Babel’s CLI, ES6 (aka: ES2015), and ES7 support)&lt;/li&gt;
  &lt;li&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;babel&quot;&lt;/code&gt; object to &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;. Inside it we’ll tell it to use the presets we installed:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babel&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stage-0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;test.js&lt;/code&gt; file and put it in a &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder. &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; (sometimes &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt;) is your original code. We transpile stuff from &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; to the sibling &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Protip:&lt;/strong&gt; You transpile CSS (Sass, Stylus, LESS, PostCSS, etc.) and HTML (Pug/Jade, Haml, etc.) as well. Currently most companies organize this stuff as &lt;code class=&quot;highlighter-rouge&quot;&gt;src/css&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;src/js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;src/html&lt;/code&gt;, etc. but I think &lt;a href=&quot;http://ecss.io/chapter5.html&quot;&gt;component architecture&lt;/a&gt; is a better solution for larger projects so try it out if you can.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Now run &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/.bin/babel src -d dist&lt;/code&gt; to ensure ES6/7 files in &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; are being transpiled to vanilla Javascript in the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder.&lt;/li&gt;
  &lt;li&gt;If you run &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/.bin/babel -h&lt;/code&gt; you’ll see it has a watch flag.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/.bin/babel -w src -d dist&lt;/code&gt; and change some stuff in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/test.js&lt;/code&gt; to make sure it’s being transpiled on saves.&lt;/li&gt;
  &lt;li&gt;Now… it’ll suck to have to type all that crap every time so add it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;scripts&quot;&lt;/code&gt; object in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;dev&quot;&lt;/code&gt; then just run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; scripts don’t need the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/.bin/&lt;/code&gt; part).&lt;/li&gt;
  &lt;li&gt;You can add/nest extra files in &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; and everything will work fine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; should look like this (if you copy this make sure you run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i&lt;/code&gt; before using it):&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;babel-cli&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^6.10.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;babel-preset-es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^6.9.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;babel-preset-stage-0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^6.5.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;babel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stage-0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babel -w src -d dist&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;congrats&quot;&gt;Congrats&lt;/h2&gt;

&lt;p&gt;Now you’re able to use ES6/7. Not only that, but you’re using &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; scripts to perform tasks which is &lt;a href=&quot;http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/&quot;&gt;pretty nice&lt;/a&gt; as long as a CLI for a particular tool is available (if one isn’t, consider doing everyone a favor and &lt;a href=&quot;https://github.com/sindresorhus/meow&quot;&gt;making one&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;homework&quot;&gt;Homework&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Learn ES6/7. It’s awesome and will make your code much more elegant.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;https://babeljs.io/docs/learn-es2015/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.2ality.com/&quot;&gt;http://www.2ality.com/&lt;/a&gt; (amazing tutorials)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Learn how to use &lt;a href=&quot;https://github.com/mysticatea/npm-run-all&quot;&gt;npm-run-all&lt;/a&gt; to watch/transpile Babel and Sass at the exact same time and consider completely replacing Gulp/Grunt with npm scripts.
    &lt;ul&gt;
      &lt;li&gt;Make Sass output source maps to &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/css/maps&lt;/code&gt; folder.&lt;/li&gt;
      &lt;li&gt;Make Sass build everything in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/css&lt;/code&gt; before it watches.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/corysimmons/80e206aba0e807df2ef6f9ab5fd25300&quot;&gt;Answer Gist&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 23 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/writings/2016/javascript/babel</link>
        <guid isPermaLink="true">http://localhost:4000/writings/2016/javascript/babel</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>ESLint</title>
        <description>&lt;p&gt;Linting is cool. It keeps people from making stupid mistakes and can make your code a lot neater/easier to read.&lt;/p&gt;

&lt;p&gt;Not linting is how you end up with spaghetti code that no one can read.&lt;/p&gt;

&lt;p&gt;Lint &lt;strong&gt;everything&lt;/strong&gt;. HTML, CSS, JS, Python, Ruby, PHP, etc.&lt;/p&gt;

&lt;p&gt;ESLint lints JS really nicely.&lt;/p&gt;

&lt;p&gt;There was JSHint and JSLint, but they were hard to extend so someone made a JS linter that was easy to extend called ESLint. It’s now the standard.&lt;/p&gt;

&lt;p&gt;Agree with your team on a coding style. This part isn’t super important and there are a ton of well thought out configs out there already like &lt;a href=&quot;https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb&quot;&gt;AirBnB&lt;/a&gt;. What’s important is you all agree to do the same code style!&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-eslint&quot;&gt;How to use ESLint&lt;/h2&gt;

&lt;p&gt;Use npm. It’s easy and portable.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/playgrounds/eslint&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo '{}' &amp;gt; package.json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save-dev eslint-config-airbnb eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y eslint&lt;/code&gt; (&lt;a href=&quot;https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb#eslint-config-airbnb-1&quot;&gt;AirBnB usage&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I feel ya. All of these npm packages seem silly, but it’s the whole Unix philosophy of making everything modular. It’s a bit annoying, but overall it’s usually a good thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;At this point you could do something like &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint --init&lt;/code&gt; to make an ESLint config file. In that file, you could add something like &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;extends&quot;: &quot;airbnb&quot;&lt;/code&gt;, but that’s newb stuff. Do we really need &lt;strong&gt;yet another&lt;/strong&gt; config file?&lt;/li&gt;
  &lt;li&gt;Do this instead: in your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; add an &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;eslintConfig&quot;&lt;/code&gt; object with &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;extends&quot;: &quot;airbnb&quot;&lt;/code&gt; in it.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Protip:&lt;/strong&gt; If you’re configuring some npm package, see if you can put it in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; instead of having 20 config files polluting the root of your project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Now you could run &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/.bin/eslint&lt;/code&gt; in terminal (and this is actually cool/useful for the &lt;code class=&quot;highlighter-rouge&quot;&gt;--fix&lt;/code&gt; flag), but you don’t want to be switching between terminal and editor after every keystroke to see if you made a mistake, so install an editor plugin for ESLint. Here’s &lt;a href=&quot;https://github.com/AtomLinter/linter-eslint&quot;&gt;Atom’s&lt;/a&gt;. ESLint is insanely popular so there is almost certainly a plugin for your editor.&lt;/li&gt;
  &lt;li&gt;Restart your editor and type some sloppy, error-filled, JS. Your editor should light up like a Christmas tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-if-i-have-some-global-variables-jquery-doesnt-work-alert-is-throwing-an-error&quot;&gt;What if I have some global variables? jQuery doesn’t work! &lt;code class=&quot;highlighter-rouge&quot;&gt;alert()&lt;/code&gt; is throwing an error!&lt;/h2&gt;

&lt;p&gt;Config it!&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslintConfig&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;airbnb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;jquery&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;no-alert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;congrats&quot;&gt;Congrats&lt;/h2&gt;

&lt;p&gt;Now you’re linting your JS like a pro. Enjoy your impending OCD.&lt;/p&gt;

&lt;h2 id=&quot;homework&quot;&gt;Homework&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Experiment with some other configs (&lt;a href=&quot;http://standardjs.com/&quot;&gt;standard&lt;/a&gt; is currently my favorite).&lt;/li&gt;
  &lt;li&gt;Write your own config.&lt;/li&gt;
  &lt;li&gt;Skim through the &lt;a href=&quot;http://eslint.org/docs/rules/&quot;&gt;rules&lt;/a&gt; and read what some of them do.&lt;/li&gt;
  &lt;li&gt;Skim through some &lt;a href=&quot;http://eslint.org/docs/user-guide/configuring&quot;&gt;configuration options&lt;/a&gt; so when something breaks you might have an idea as to what’s wrong.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 22 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/writings/2016/javascript/eslint</link>
        <guid isPermaLink="true">http://localhost:4000/writings/2016/javascript/eslint</guid>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
